<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>D3.js World Map</title>
    <!-- Load d3.js -->
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
    <script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>
    <style>
        body {
            background-color: #333;
            margin: 0;
            overflow: hidden; /* prevent scrolling */
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        #my_dataviz {
            width: 80vw;
            height: 80vh;
            display: block;
        }

        #tooltip {
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
            display: none;
        }

        #modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
        }

        #modal-content {
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            text-align: center;
        }

        #close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            color: #fff;
            background-color: red;
            padding: 5px;
            border-radius: 3px;
        }
    </style>
</head>
<body>

    <!-- Create an element where the map will take place -->
    <svg id="my_dataviz"></svg>
    <div id="tooltip"></div>

    <!-- Modal window for displaying country name -->
    <div id="modal">
        <div id="modal-content">
            <span id="country-info"></span>
            <div id="close-btn">X</div>
        </div>
    </div>

    <script>
        // The svg
        var svg = d3.select("svg"),
            width = window.innerWidth * 0.8,
            height = window.innerHeight * 0.8;

        // Map and projection
        var projection = d3.geoNaturalEarth1()
            .scale((width + 1) / 2 / Math.PI)
            .translate([width / 2, height / 2]);

        // Load external data and boot
        d3.json("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson", function (worldData) {

            // Extrahiere Daten aus TSV und kombiniere sie mit GeoJSON-Daten
            d3.tsv("../data/iso3.tsv", function (d) {
                return {
                    alpha3: d.alpha3,
                    country: d.country,
                    subregion: d.subregion,
                    region: d.region
                };
            }, function (error, tsvData) {
                if (error) throw error;

                // Erstelle ein Objekt, um den Zugriff auf TSV-Daten zu erleichtern
                var tsvDataMap = {};
                tsvData.forEach(function (d) {
                    tsvDataMap[d.country] = d;
                });

                // Füge TSV-Daten zu den GeoJSON-Daten hinzu
                worldData.features.forEach(function (feature) {
                    var countryName = feature.properties.name;
                    var tsvCountryData = tsvDataMap[countryName];
                    if (tsvCountryData) {
                        feature.properties.tsvData = tsvCountryData;
                    }
                });

                


                
            // Load the second external data (CO2 data)
            d3.tsv("../data/owid-co2-data.tsv", function (d) {
                return {
                    country: d.country,
                    year: +d.year, // Convert year to a number
                    iso_code: d.iso_code,
                    population: +d.population, // Convert population to a number
                    gdp: +d.gdp, // Convert gdp to a number
                    cement_co2: +d.cement_co2,
                    cement_co2_per_capita: +d.cement_co2_per_capita,
                    co2: +d.co2,
                    co2_growth_abs: +d.co2_growth_abs,
                    co2_growth_prct: +d.co2_growth_prct,
                    co2_per_capita: +d.co2_per_capita,
                    co2_per_gdp: +d.co2_per_gdp,
                    co2_per_unit_energy: +d.co2_per_unit_energy,
                    coal_co2: +d.coal_co2,
                    coal_co2_per_capita: +d.coal_co2_per_capita,
                    consumption_co2: +d.consumption_co2,
                    consumption_co2_per_capita: +d.consumption_co2_per_capita,
                    consumption_co2_per_gdp: +d.consumption_co2_per_gdp,
                    cumulative_cement_co2: +d.cumulative_cement_co2,
                    cumulative_co2: +d.cumulative_co2,
                    cumulative_coal_co2: +d.cumulative_coal_co2,
                    cumulative_flaring_co2: +d.cumulative_flaring_co2,
                    cumulative_gas_co2: +d.cumulative_gas_co2,
                    cumulative_oil_co2: +d.cumulative_oil_co2,
                    cumulative_other_co2: +d.cumulative_other_co2,
                    energy_per_capita: +d.energy_per_capita,
                    energy_per_gdp: +d.energy_per_gdp,
                    flaring_co2: +d.flaring_co2,
                    flaring_co2_per_capita: +d.flaring_co2_per_capita,
                    gas_co2: +d.gas_co2,
                    gas_co2_per_capita: +d.gas_co2_per_capita,
                    ghg_excluding_lucf_per_capita: +d.ghg_excluding_lucf_per_capita,
                    ghg_per_capita: +d.ghg_per_capita,
                    methane: +d.methane,
                    methane_per_capita: +d.methane_per_capita,
                    nitrous_oxide: +d.nitrous_oxide,
                    nitrous_oxide_per_capita: +d.nitrous_oxide_per_capita,
                    oil_co2: +d.oil_co2,
                    oil_co2_per_capita: +d.oil_co2_per_capita,
                    other_co2_per_capita: +d.other_co2_per_capita,
                    other_industry_co2: +d.other_industry_co2,
                    primary_energy_consumption: +d.primary_energy_consumption,
                    share_global_cement_co2: +d.share_global_cement_co2,
                    share_global_co2: +d.share_global_co2,
                    share_global_coal_co2: +d.share_global_coal_co2,
                    share_global_cumulative_cement_co2: +d.share_global_cumulative_cement_co2,
                    share_global_cumulative_co2: +d.share_global_cumulative_co2,
                    share_global_cumulative_coal_co2: +d.share_global_cumulative_coal_co2,
                    share_global_cumulative_flaring_co2: +d.share_global_cumulative_flaring_co2,
                    share_global_cumulative_gas_co2: +d.share_global_cumulative_gas_co2,
                    share_global_cumulative_oil_co2: +d.share_global_cumulative_oil_co2,
                    share_global_cumulative_other_co2: +d.share_global_cumulative_other_co2,
                    share_global_flaring_co2: +d.share_global_flaring_co2,
                    share_global_gas_co2: +d.share_global_gas_co2,
                    share_global_oil_co2: +d.share_global_oil_co2,
                    share_global_other_co2: +d.share_global_other_co2,
                    total_ghg: +d.total_ghg,
                    total_ghg_excluding_lucf: +d.total_ghg_excluding_lucf,
                    trade_co2: +d.trade_co2,
                    trade_co2_share: +d.trade_co2_share
                };
            }, function (error, extractedData) {
                if (error) throw error;
                
                // Create an object to store the extracted data using iso_code as the key
                var extractedDataMap = {};
                extractedData.forEach(function (d) {
                    extractedDataMap[d.iso_code] = d;
                });

                // Merge extracted data with worldData based on matching iso_code
                worldData.features.forEach(function (feature) {
                    var isoCode = feature.id; // Assuming id is iso_code in worldData
                    var extractedDataItem = extractedDataMap[isoCode];

                    if (extractedDataItem) {
                        // Merge the properties of worldData and extractedData only if iso_code matches
                        if (feature.properties.alpha3 === extractedDataItem.alpha3) {
                            feature.properties.secondTsvData = extractedDataItem;
                        }
                    }
                });


                
                console.log(worldData);





                // Draw the map
                var countries = svg.append("g")
                    .selectAll("path")
                    .data(worldData.features)
                    .enter().append("path")
                    .attr("fill", "#ccc")
                    .attr("d", d3.geoPath()
                        .projection(projection)
                    )
                    .style("stroke", "#333")
                    .attr("data-properties", function (d) {
                        // Set a custom attribute containing all properties
                        return JSON.stringify(d.properties);
                    });

                // Tooltip element for displaying country name
                var tooltip = d3.select("#tooltip");

                // Modal elements
                var modal = d3.select("#modal");
                var modalContent = d3.select("#modal-content");
                var countryInfo = d3.select("#country-info");
                var closeBtn = d3.select("#close-btn");

                // Variable für das ausgewählte Land
                var selectedCountry;

                // Event listeners for hover
                countries
                    .on("mouseover", function (event, d) {
                        var properties = JSON.parse(d3.select(this).attr("data-properties"));
                        if (properties) {
                            // Show tooltip with country name
                            tooltip.text(properties.name)
                                .style("display", "block");
                        } else {
                            tooltip.style("display", "none");
                        }
                        d3.select(this).attr("fill", "orange"); // Change the fill color on hover
                    })
                    .on("mouseout", function (event, d) {
                        tooltip.style("display", "none");
                        if (!selectedCountry) {
                            d3.select(this).attr("fill", "#ccc"); // Change the fill color back on mouseout
                        }
                    })
                    // Event listener for clicking on a country
                    .on("click", function (event, d) {
                        var properties = JSON.parse(d3.select(this).attr("data-properties"));
                        if (properties) {
                            // Mark the currently selected country
                            selectedCountry = this;
                            d3.select(this).attr("fill", "orange");
                            // Display country name
                            var modalContentHtml = "<strong>Name:</strong> " + properties.name + "<br>"

                            if (properties.tsvData) {
                                // Display country properties in modal
                                modalContentHtml += "<strong>Alpha3:</strong> " + properties.tsvData.alpha3 + "<br>"
                                    + "<strong>Region:</strong> " + properties.tsvData.region + "<br>"
                                    + "<strong>Subregion:</strong> " + properties.tsvData.subregion + "<br>";
                            }
                            else {
                                modalContentHtml += "<strong>No more data available</strong>";
                            }
                             
                            countryInfo.html(modalContentHtml);
                            // Show modal
                            modal.style("display", "flex");
                        }
                    });

                // Event listener for closing the modal
                closeBtn.on("click", function () {
                    // Hide modal
                    modal.style("display", "none");
                    // delete country color filling in world map
                    d3.select(selectedCountry).attr("fill", "#ccc");
                    selectedCountry = null;
                });

            });
            });
        });
    </script>

</body>
</html>
